"""
This is a echo bot.
It echoes any incoming text messages.
"""
import random
import logging
import torch
from bert_classifier import BertClassifier
from deeppavlov import build_model
import pandas as pd
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '5817022810:AAHr4f8l_a0xZqqafcM3vAByng3EPH3hQ18'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

global mean
global answerer
global model
global texts
global items
global prev_ans
global repeat
global prev_ph


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    prev_ans[message.chat.id] = []
    prev_ph[message.chat.id] = []
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ú–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–≥—Ä—É–∑–∏—Ç—å —Ç–µ–±—è –≤ –º–∏—Ä Dota 2. –ñ–µ–ª–∞—é –ø—Ä–µ—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—èüòâ")


@dp.message_handler()
async def echo(message: types.Message):
    if not prev_ans[message.chat.id]:
        prev_ans[message.chat.id] = []
        prev_ph[message.chat.id] = []
    if message.text == '–î–∞' or message.text == '–¥–∞':
        await message.answer('–ø—Ä–æ–≤–æ–¥–∞')
        return
    if message.text == '–Ω–µ—Ç' or message.text == '–ù–µ—Ç':
        await message.answer('–æ–±–µ–∑—å—è–Ω—ã –æ—Ç–≤–µ—Ç')
        return

    n = model.predict(message.text)
    ans = ''
    global texts_temp
    if len(texts[n])>5:
        texts_temp = random.choices(texts[n], k=5)
    else:
        texts_temp = texts[n]
    max_val = 0
    while texts_temp:
        temp = answerer([texts_temp.pop()], [message.text])
        print(temp)
        if temp[2][0]>max_val and temp[0][0]:
            max_val = temp[2][0]
            ans = temp[0][0]
            if max_val == 1.0:
                break

    if not ans:
        text = random.choice(
            texts[random.choice([0, 1, 2, 3, 4, 5, 2, 3])])
        ans = answerer([text], [message.text])[0][0]
    if not ans:
        ans = random.choice(items)
    if ans in prev_ans[message.chat.id]:
        if ans not in items:
            ans = random.choice(repeat)
        while (ans in repeat) and (ans in prev_ans[message.chat.id]):
            ans = random.choice(repeat)
        while (ans in items) and (ans in prev_ans[message.chat.id]):
            if ans == 'image':
                break
            ans = random.choice(items)
    if ans == 'image':
        ans = random.choice(photos)
        while ans in prev_ph[message.chat.id]:
            ans = random.choice(photos)
        prev_ph[message.chat.id].append(ans)
        photo = open(ans, "rb")
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        return
    prev_ans[message.chat.id].append(ans)
    if len(prev_ans) > 15:
        prev_ans.pop(0)
    print(message.text + ' |||| —Ç–µ–º–∞: ' + mean[n] + ' |||| –æ—Ç–≤–µ—Ç:' + ans)
    await message.answer(ans)


if __name__ == '__main__':
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model_ = torch.load('bert_3.pt', map_location=device)
    model_.load_state_dict(torch.load('state_dict_1.pt',
                                      map_location=device))
    model_.eval()
    model = BertClassifier(model_, n_classes=6)
    answerer = build_model('squad_ru_bert', download=True)
    data = pd.read_csv('Dota_talk - Copy.csv')
    texts = dict()
    for d in data['theme'].unique():
        texts[d] = []
    for n, t in zip(data['theme'], data['text']):
        texts[n].append(t)
    repeat = ['—è —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª', '–º–Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?', '—É —Ç–µ–±—è –ø–∞–º—è—Ç—å –∫–∞–∫ —É —Ä—ã–±–∫–∏? —è —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª', '—è —É–∂–µ –ø–∏—Å–∞–ª',
              '–∑–∞–∫–æ–ª–µ–±–∞–ª, —è —É–∂–µ –æ—Ç–≤–µ—á–∞–ª', '—è —É–∂–µ –æ—Ç–≤–µ—á–∞–ª', '—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å?']
    prev_ans = dict()
    prev_ph = dict()
    photos = ['ph/6b481a4b463c47e421eda249d837b423.jpg', 'ph/94daa326177cff8b854fc50bfc2ab9f2.jpg',
              'ph/ab23171d63e68004a0e3957d5b3b0b06.jpg', 'bot/ph/bcd785e72da7efc428fda2d547750317.jpg', 'ph/1.jpg',
              'ph/2.jpeg', 'ph/3.jpg', 'ph/4.jpg', 'ph/5.jpg', 'ph/6.jpg', 'ph/7.jpg', 'ph/8.jpg', 'ph/9.jpg']
    mean = {
        0: "—Ä–æ–¥–∏—Ç–µ–ª–∏",
        1: "—Ñ–∞–Ω–∞—Ç",
        2: "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è",
        3: "–æ–±—â–µ–µ",
        4: "–ø–æ–ª–∏—Ç–∏–∫–∞",
        5: "dota",
        6: "—Ö–∑ —á—Ç–æ —ç—Ç–æ",
    }
    #items = ['image']
    items = ['—á—Ç–æ? –ø–æ–≤—Ç–æ—Ä–∏ –ø–∂', '—è –Ω–µ –ø–æ–Ω', '–ø–µ—Ä–µ—Å—Ç–∞–Ω—å –¥–µ—Ä–∂–∞—Ç—å —É–∂–µ —á–ª–µ–Ω –∏ –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
             '–∫–æ–≥–¥–∞ —Ç–µ–±–µ –≤ —Ä–æ—Ç —á–µ–º-—Ç–æ —Ç—ã–∫–∞—é—Ç –ø–∏—Å–∞—Ç—å –Ω–µ —É–¥–æ–±–Ω–æ –∫–Ω—à', '–∞ —Ç—ã —Å–º–µ—à–Ω–æ–π', '–ø–∂ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–∏ —Å—é–¥–∞',
             '–Ω–µ –ª–µ–∑—å –≤ —ç—Ç—É —Ç–µ–º—É –¥—É—Ä–∞', '—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', '—á—Ç–æ —Å —Ç–æ–±–æ–π –Ω–µ —Ç–∞–∫?', '–Ω–µ –ø–∏—à–∏ —Å—é–¥–∞ –±–æ–ª—å—à–µ', '–ø–æ–Ω', 'wtf',
             '–º–∞–º–∞ —Ç–≤–æ—è', '—è —É—á—Ç—É —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ, –∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö', '–∫–æ–Ω—á', '–≤–æ—Ç —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å?',
             '–Ω–µ –≤—ã–ø–µ–Ω–¥—Ä–∏–≤–∞–π—Å—è', '–ø–æ–º–æ–ª—á–∏ –ª—É—á—à–µ', '—Ç—ã –≤ –º—É—Ç–µ, –±–µ–∑–¥–∞—Ä—å', '–Ω–µ –ø—É–∫–∞–π', '–ø—É–∫-–ø—É–∫',
             '—Ö—É–∂–µ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –∂–∏—Ä–∫–æ–≤', '—Ç—ã –º–Ω–µ —É–∂–µ –Ω–∞—Å–∫—É—á–∏–ª', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ç—ã –º–Ω–µ', '—Ç—ã –º–Ω–µ –Ω–∞–¥–æ–µ–ª',
             '—è –æ—Ç —Ç–µ–±—è —É—Å—Ç–∞–ª', '–º–Ω–µ –Ω–∞–¥–æ–µ–¥–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è', '—è —Ç–µ–±—è –Ω–µ –≤—Ä–∞–∑—É–º–∏–≤', 'not understand',
             'image', '–≤—ã–Ω—å —Ä—É–∫–∏ –∏–∑ —à—Ç–∞–Ω–æ–≤ –∏ –ø–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ', '—Ö–≤–∞—Ç–∏—Ç –Ω–∞—è—Ä–∏–≤–∞—Ç—å, –ø–∏—à–∏ —á–ª–µ–Ω–æ—Ä–∞–∑–¥–µ–ª—å–Ω–æ']
    executor.start_polling(dp, skip_updates=True)
    print('–≥–æ—Ç–æ–≤')
